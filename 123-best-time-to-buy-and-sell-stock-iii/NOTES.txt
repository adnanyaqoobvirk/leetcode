@cache
def recurse(pos: int, price: int, count: int) -> int:
if pos >= n or count == 2:
return 0

return max(
recurse(pos + 1, prices[pos], count),
recurse(pos + 1, price, count),
prices[pos] - price + recurse(pos + 1, -1, count + 1) if price > -1 else 0
)

n = len(prices)
return recurse(0, -1, 0)


n = len(prices)
dp = [[defaultdict(int) for _ in range(3)] for _ in range(n + 1)]
for j in reversed(range(2)):
for i in reversed(range(n)):
for k in reversed(range(i + 1)):
price = prices[k] if k < i else -1
dp[i][j][price] = max(
dp[i + 1][j][prices[i]],
dp[i + 1][j][price],
prices[i] - price + dp[i + 1][j + 1][-1] if price > -1 else 0
)
return dp[0][0][-1]